{"version":3,"sources":["ng://gnx-auth/lib/gnx-auth.service.ts","ng://gnx-auth/lib/guards/allow-non-logged-user.guard.ts","ng://gnx-auth/lib/guards/require-logged-user.guard.ts","ng://gnx-auth/lib/components/gnx-auth.component.ts","ng://gnx-auth/lib/interceptors/gnx-apply-token-interceptor.ts","ng://gnx-auth/lib/interceptors/gnx-refresh-token-interceptor.ts","ng://gnx-auth/lib/gnx-auth.module.ts"],"names":["GnxAuthService","prototype","setTranslatorService","translatorService","this","init","matchings","window","location","search","match","code","getTokensByCode","tryToGetTokensFromCookieOrStorage","subscribe","initialized","getToken","accessToken$","asObservable","_this","params","URLSearchParams","append","clientId","getRedirectUri","headers","HttpHeaders","Content-type","Authorization","btoa","http","post","authServerUrl","AUTH_SERVER_TOKEN_ENDPOINT","toString","tokenData","saveTokens","next","accessToken","removeCodeParamAndNavigateToTheSamePage","then","err","getAccessTokenByRefreshToken","pipe","switchMap","val","redirectToLoginPage","href","AUTH_SERVER_LOGIN_ENDPOINT","redirectToSignUpPage","AUTH_SERVER_SIGN_UP_ENDPOINT","logout","deleteTokens","navigateToTheSamePage","retrieveUserLanguageFromServer","get","AUTH_SERVER_LANGUAGE_ENDPOINT","res","locale","getCurrentLang","toLowerCase","userLanguage","useLanguage","setDefaultUserLanguage","isValidToken","of","refreshToken","encodedToken","cookieService","ACCESS_TOKEN_COOKIE_NAME","decodedToken","decodeToken","removeAccessTokenFromCookie","REFRESH_TOKEN_COOKIE_NAME","getNewTokensByRefreshToken","tap","map","catchError","removeRefreshTokenFromCookie","queryParams","route","snapshot","queryParamMap","keys","forEach","k","currentUrlPath","getCurrentUrlPath","router","navigate","relativeTo","decodedAccessToken","access_token","acExpireDate","Date","exp","set","COOKIE_PATH","cookieDomainName","decodedRefreshToken","refresh_token","rtExpireDate","url","indexOf","substr","body","token","expirationSeconds","getTime","cookieValue","expireDate","jwtHelper","replace","Injectable","args","providedIn","HttpClient","CookieService","Router","ActivatedRoute","Inject","env","JwtHelperService","ReplaySubject","AllowNonLoggedUserGuard","canActivate","auth","RequireLoggedUserGuard","GnxAuthComponent","ngOnInit","service","userName","user_name","isLoggedIn","login","signUp","translate","text","instant","Component","selector","template","Input","redirectToLoginPageIfUserNotLoggedIn","GnxApplyTokenInterceptor","intercept","req","gnxAuthService","first","clone","setHeaders","request","handle","GnxRefreshTokenInterceptor","startsWith","HttpErrorResponse","status","notTriedYet","newRequest","throwError","GnxAuthModule","forRoot","environment","ngModule","providers","provide","useClass","useValue","NgModule","declarations","imports","BrowserModule","exports","HTTP_INTERCEPTORS","multi"],"mappings":"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","sourcesContent":["import {Inject, Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable, of, ReplaySubject, Subject} from 'rxjs';\nimport {catchError, map, switchMap, tap} from 'rxjs/operators';\nimport {Token, TokenData, Translateable} from './gnx-models';\nimport {CookieService} from \"ngx-cookie-service\";\nimport {JwtHelperService} from '@auth0/angular-jwt';\nimport {ActivatedRoute, Router} from \"@angular/router\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GnxAuthService {\n  readonly AUTH_SERVER_TOKEN_ENDPOINT = '/oauth/token';\n  readonly AUTH_SERVER_LOGIN_ENDPOINT = '/oauth/authorize';\n  readonly AUTH_SERVER_SIGN_UP_ENDPOINT = '/registration';\n  readonly AUTH_SERVER_LANGUAGE_ENDPOINT = '/api/accounts/current/locale';\n  readonly ACCESS_TOKEN_COOKIE_NAME = 'access_token';\n  readonly REFRESH_TOKEN_COOKIE_NAME = 'refresh_token';\n  readonly COOKIE_PATH = '/';\n\n  private initialized = false;\n\n  clientId: string;\n  authServerUrl: string;\n  cookieDomainName: string;\n\n  private jwtHelper = new JwtHelperService();\n\n  private accessToken$: Subject<Token> = new ReplaySubject<Token>(1);\n  private accessToken: Token;\n  private refreshToken: Token;\n\n  private translatorService: Translateable;\n\n  private userLanguage: string;\n\n  constructor(private http: HttpClient,\n              private cookieService: CookieService,\n              private router: Router,\n              private route: ActivatedRoute,\n              @Inject('env') private env) {\n\n    this.clientId = env.clientId;\n    this.authServerUrl = env.authServerUrl;\n    this.cookieDomainName = env.cookieDomainName;\n  }\n\n  setTranslatorService(translatorService: Translateable) {\n    this.translatorService = translatorService;\n  }\n\n  init() {\n    // intercept request with 'code' param to get token by the code\n    let matchings = window.location.search.match(/code=(.+?)(&.+)?$/);\n    let code = matchings ? matchings[1] : null;\n    if (code) {\n      this.getTokensByCode(code);\n    } else {\n      this.tryToGetTokensFromCookieOrStorage().subscribe();\n    }\n    this.initialized = true;\n  }\n\n  getToken(): Observable<Token> {\n    if (!this.initialized) {\n      this.init();\n    }\n    return this.accessToken$.asObservable();\n  }\n\n  getTokensByCode(code: string) {\n    const params = new URLSearchParams();\n    params.append('grant_type', 'authorization_code');\n    params.append('client_id', this.clientId);\n    params.append('redirect_uri', this.getRedirectUri());\n    params.append('code', code);\n\n    const headers = new HttpHeaders({\n      'Content-type': 'application/x-www-form-urlencoded; charset=utf-8',\n      'Authorization': 'Basic ' + btoa(this.clientId + ':secret')\n    });\n\n    this.http.post<TokenData>(this.authServerUrl + this.AUTH_SERVER_TOKEN_ENDPOINT, params.toString(),\n      {headers: headers}).subscribe(tokenData => {\n        this.saveTokens(tokenData);\n        this.accessToken$.next(this.accessToken);\n        this.removeCodeParamAndNavigateToTheSamePage().then();\n      },\n      err => this.accessToken$.next(null));\n  }\n\n  getAccessTokenByRefreshToken(): Observable<Token> {\n    return this.tryToGetTokensFromCookieOrStorage().pipe(\n      switchMap(val => this.getToken())\n    );\n  }\n\n  redirectToLoginPage() {\n    window.location.href = `${this.authServerUrl}${this.AUTH_SERVER_LOGIN_ENDPOINT}` +\n      `?response_type=code&client_id=${this.clientId}&redirect_uri=${this.getRedirectUri()}`;\n  }\n\n  redirectToSignUpPage() {\n    window.location.href = `${this.authServerUrl}${this.AUTH_SERVER_SIGN_UP_ENDPOINT}`;\n  }\n\n  logout() {\n    this.deleteTokens();\n    this.accessToken$.next(null);\n    this.navigateToTheSamePage().then();\n  }\n\n  retrieveUserLanguageFromServer() {\n    this.http.get<{ locale: string }>(this.authServerUrl + this.AUTH_SERVER_LANGUAGE_ENDPOINT)\n      .subscribe(res => {\n        if (res && res.locale !== this.translatorService.getCurrentLang().toLowerCase()) {\n          this.userLanguage = res.locale;\n          this.translatorService.useLanguage(this.userLanguage);\n        }\n      });\n  }\n\n  setDefaultUserLanguage() {\n    this.userLanguage = this.translatorService.getCurrentLang();\n  }\n\n  private tryToGetTokensFromCookieOrStorage(): Observable<boolean> {\n    if (this.isValidToken(this.accessToken)) {\n      this.accessToken$.next(this.accessToken);\n      return of(true);\n    }\n\n    // look for access_token in cookie\n    let encodedToken = this.cookieService.get(this.ACCESS_TOKEN_COOKIE_NAME);\n    let decodedToken = this.decodeToken(encodedToken);\n    if (this.isValidToken(decodedToken)) {\n      this.accessToken = decodedToken;\n      this.accessToken$.next(decodedToken);\n      return of(true);\n    } else {\n      this.removeAccessTokenFromCookie();\n    }\n\n    // look for a refresh token in cookie\n    let refreshToken: Token;\n    if (this.refreshToken) {\n      refreshToken = this.refreshToken;\n    } else {\n      refreshToken = this.decodeToken(this.cookieService.get(this.REFRESH_TOKEN_COOKIE_NAME));\n    }\n    if (this.isValidToken(refreshToken)) {\n      return this.getNewTokensByRefreshToken(refreshToken).pipe(\n        tap(tokenData => {\n          this.saveTokens(tokenData);\n          this.accessToken$.next(this.accessToken);\n        }),\n        map(tokenData => !!tokenData),\n        catchError(err => {\n          this.removeRefreshTokenFromCookie();\n          this.accessToken$.next(null);\n          return of(false);\n        })\n      );\n    } else {\n      this.removeRefreshTokenFromCookie();\n    }\n\n    this.accessToken$.next(null);\n    return of(false);\n  }\n\n  private removeCodeParamAndNavigateToTheSamePage(): Promise<boolean> {\n    let queryParams: any = {};\n    let params = this.route.snapshot.queryParamMap;\n    params.keys.forEach(k => {\n      if (k !== 'code') {\n        queryParams[k] = params.get(k);\n      }\n    });\n\n    let currentUrlPath = this.getCurrentUrlPath();\n    return this.router.navigate(\n      [currentUrlPath],\n      {\n        relativeTo: this.route,\n        queryParams: queryParams,\n      });\n  }\n\n  private navigateToTheSamePage(): Promise<boolean> {\n    let queryParams: any = {};\n    let params = this.route.snapshot.queryParamMap;\n    params.keys.forEach(k => {\n        queryParams[k] = params.get(k);\n    });\n\n    let currentUrlPath = this.getCurrentUrlPath();\n    return this.router.navigate(\n      [currentUrlPath],\n      {\n        relativeTo: this.route,\n        queryParams: queryParams,\n      });\n  }\n\n  private saveTokens(tokenData: TokenData) {\n    if (tokenData) {\n      let decodedAccessToken = this.decodeToken(tokenData.access_token);\n      let acExpireDate = new Date(decodedAccessToken.exp * 1000);\n      this.cookieService.set(this.ACCESS_TOKEN_COOKIE_NAME, tokenData.access_token, acExpireDate, this.COOKIE_PATH, this.cookieDomainName);\n      this.accessToken = decodedAccessToken;\n\n      let decodedRefreshToken = this.decodeToken(tokenData.refresh_token);\n      let rtExpireDate = new Date(decodedRefreshToken.exp * 1000);\n      this.cookieService.set(this.REFRESH_TOKEN_COOKIE_NAME, tokenData.refresh_token, rtExpireDate, this.COOKIE_PATH, this.cookieDomainName);\n      this.refreshToken = this.decodeToken(tokenData.refresh_token);\n    }\n  }\n\n  private getCurrentUrlPath() {\n    let url = this.router.url;\n    if (url.indexOf('?') > 0) {\n      url = url.substr(0, url.indexOf('?'))\n    }\n    return url;\n  }\n\n  private getNewTokensByRefreshToken(refreshToken: Token): Observable<TokenData> {\n    const headers = new HttpHeaders({\n      'Content-type': 'application/x-www-form-urlencoded; charset=utf-8',\n      'Authorization': 'Basic ' + btoa(this.clientId + ':secret')\n    });\n\n    let body = new URLSearchParams();\n    body.set('grant_type', 'refresh_token');\n    body.set('refresh_token', refreshToken.encodedToken);\n\n    return this.http.post<TokenData>(this.authServerUrl + this.AUTH_SERVER_TOKEN_ENDPOINT, body.toString(), {headers: headers});\n  }\n\n  private isValidToken(token: Token): boolean {\n    if (!token) {\n      return false;\n    }\n    let expirationSeconds = token.exp;\n    return expirationSeconds && (new Date().getTime() < expirationSeconds * 1000);\n  }\n\n  private deleteTokens() {\n    this.removeAccessTokenFromCookie();\n    this.accessToken = null;\n    this.removeRefreshTokenFromCookie();\n    this.refreshToken = null;\n  }\n\n  private removeAccessTokenFromCookie() {\n    let cookieValue = this.cookieService.get(this.ACCESS_TOKEN_COOKIE_NAME);\n    if (cookieValue) {\n      let expireDate = new Date(0);\n      this.cookieService.set(this.ACCESS_TOKEN_COOKIE_NAME, cookieValue, expireDate, this.COOKIE_PATH, this.cookieDomainName);\n    }\n  }\n\n  private removeRefreshTokenFromCookie() {\n    let cookieValue = this.cookieService.get(this.REFRESH_TOKEN_COOKIE_NAME);\n    if (cookieValue) {\n      let expireDate = new Date(0);\n      this.cookieService.set(this.REFRESH_TOKEN_COOKIE_NAME, cookieValue, expireDate, this.COOKIE_PATH, this.cookieDomainName);\n    }\n  }\n\n  private decodeToken(encodedToken: string): Token {\n    if (!encodedToken) {\n      return null;\n    }\n\n    let decodedToken = this.jwtHelper.decodeToken(encodedToken) as Token;\n    if (decodedToken) {\n      decodedToken.encodedToken = encodedToken;\n    }\n\n    return decodedToken;\n  }\n\n  private getRedirectUri(): string {\n    return window.location.href.replace(/^(http[s]?:\\/\\/[a-zA-Z\\\\.:0-9]+)(\\/.*)$/, '$1');\n  }\n\n}\n","import {Injectable} from \"@angular/core\";\nimport {CanActivate, Router} from \"@angular/router\";\nimport {GnxAuthService} from \"../gnx-auth.service\";\nimport {Observable, of} from \"rxjs\";\nimport {map, switchMap} from \"rxjs/operators\";\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AllowNonLoggedUserGuard implements CanActivate {\n  constructor(public auth: GnxAuthService, public router: Router) {}\n  canActivate(): Observable<boolean> {\n    return of(null).pipe(\n      switchMap(() => this.auth.getToken()),\n      map(token => {\n        return true;\n      }) // always returns true, needed to try to get token from cookie\n    );\n  }\n}\n","import {Injectable} from \"@angular/core\";\nimport {CanActivate, Router} from \"@angular/router\";\nimport {GnxAuthService} from \"../gnx-auth.service\";\nimport {Observable} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RequireLoggedUserGuard implements CanActivate {\n  constructor(public auth: GnxAuthService, public router: Router) {}\n  canActivate(): Observable<boolean> {\n    return this.auth.getToken().pipe(\n      map(token => {\n        if (!token) {\n          this.auth.redirectToLoginPage();\n          return false;\n        }\n        return true;\n      }),\n    );\n  }\n}\n","import {Component, Inject, Input, OnInit} from '@angular/core';\nimport {GnxAuthService} from \"../gnx-auth.service\";\nimport {Translateable} from \"../gnx-models\";\n\n@Component({\n  selector: 'gnx-auth',\n  templateUrl: './gnx-auth.component.html',\n  styleUrls: ['./gnx-auth.component.scss']\n})\nexport class GnxAuthComponent implements OnInit {\n\n  @Input() redirectToLoginPageIfUserNotLoggedIn = true;\n\n  isLoggedIn: boolean;\n  userName: string;\n  initialized = false;\n\n  constructor(private service: GnxAuthService,\n              @Inject('TranslatorService') public translatorService: Translateable,\n              @Inject('env') public env) {\n    service.setTranslatorService(translatorService);\n  }\n\n  ngOnInit() {\n    this.service.getToken().subscribe(token => {\n      if (token) {\n        this.userName = token.user_name;\n        this.isLoggedIn = true;\n        this.service.retrieveUserLanguageFromServer();\n      } else {\n        this.userName = null;\n        this.isLoggedIn = false;\n        this.service.setDefaultUserLanguage();\n      }\n      this.initialized = true;\n    });\n  }\n\n  login() {\n    this.service.redirectToLoginPage();\n  }\n\n  signUp() {\n    this.service.redirectToSignUpPage();\n  }\n\n  logout() {\n    this.service.logout();\n    this.isLoggedIn = false;\n  }\n\n  translate(text: string): string {\n    return this.translatorService.translate.instant(text);\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\n\nimport {Observable} from 'rxjs';\nimport {GnxAuthService} from \"../gnx-auth.service\";\nimport {first, map, switchMap} from \"rxjs/operators\";\n\n@Injectable()\nexport class GnxApplyTokenInterceptor implements HttpInterceptor {\n\n  constructor(private gnxAuthService: GnxAuthService) {\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (req.url.indexOf('/api/') > -1) {\n      return this.gnxAuthService.getToken().pipe(\n        first(),\n        map(token => {\n            if (token) {\n              return req.clone({\n                setHeaders: {\n                  Authorization: 'Bearer ' + token.encodedToken\n                }\n              })\n            }\n            return req;\n          }\n        ),\n        switchMap(request => next.handle(request)),\n      );\n    }\n    return next.handle(req);\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\n\nimport {Observable, throwError} from 'rxjs';\nimport {catchError, first, switchMap} from \"rxjs/operators\";\nimport {GnxAuthService} from \"../gnx-auth.service\";\n\n@Injectable()\nexport class GnxRefreshTokenInterceptor implements HttpInterceptor {\n\n  private notTriedYet = true;\n\n    constructor(private gnxAuthService: GnxAuthService) {\n    }\n\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n      if (req.url.startsWith('/api/')) {\n        return next.handle(req).pipe(\n          catchError(err => {\n            if (err instanceof HttpErrorResponse && err.status === 401) { // it seems access token hs expired, try to get new tokens by refresh token\n              if (this.notTriedYet) {\n                this.notTriedYet = false;\n                return this.gnxAuthService.getAccessTokenByRefreshToken().pipe(\n                  first(),\n                  switchMap(token => {\n                    this.notTriedYet = true;\n                    if (token) {\n                      let newRequest = req.clone({\n                        setHeaders: {\n                          Authorization: 'Bearer ' + token.encodedToken\n                        }\n                      });\n                      return next.handle(newRequest);\n                    }\n                    this.gnxAuthService.redirectToLoginPage();\n                  })\n                );\n              } else {\n                this.notTriedYet = true;\n                this.gnxAuthService.redirectToLoginPage();\n              }\n            } else {\n              return throwError(err);\n            }\n          })\n        );\n      }\n\n      return next.handle(req);\n    }\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\n// LibComponent\nimport {GnxAuthComponent} from './components/gnx-auth.component';\nimport {CookieService} from \"ngx-cookie-service\";\nimport {HTTP_INTERCEPTORS} from \"@angular/common/http\";\nimport {GnxApplyTokenInterceptor} from \"./interceptors/gnx-apply-token-interceptor\";\nimport {GnxRefreshTokenInterceptor} from \"./interceptors/gnx-refresh-token-interceptor\";\nimport {GnxAuthService} from \"./gnx-auth.service\";\n\n\n@NgModule({\n  declarations: [\n    GnxAuthComponent\n  ],\n  imports: [\n    BrowserModule,\n  ],\n  exports: [\n    GnxAuthComponent\n  ],\n  providers: [\n    CookieService,\n    {provide: HTTP_INTERCEPTORS, useClass: GnxApplyTokenInterceptor, multi: true},\n    {provide: HTTP_INTERCEPTORS, useClass: GnxRefreshTokenInterceptor, multi: true},\n  ]\n})\nexport class GnxAuthModule {\n\n  public static forRoot(environment: any, translatorService: any): ModuleWithProviders {\n\n    return {\n      ngModule: GnxAuthModule,\n      providers: [\n        GnxAuthService,\n        {provide: 'TranslatorService', useClass: translatorService},\n        {\n          provide: 'env',\n          useValue: environment\n        }\n      ]\n    };\n  }\n}\n"]}