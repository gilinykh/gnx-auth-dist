{"version":3,"file":"gnx-auth.js.map","sources":["ng://gnx-auth/lib/gnx-auth.service.ts","ng://gnx-auth/lib/guards/allow-non-logged-user.guard.ts","ng://gnx-auth/lib/guards/require-logged-user.guard.ts","ng://gnx-auth/lib/components/gnx-auth.component.ts","ng://gnx-auth/lib/interceptors/gnx-apply-token-interceptor.ts","ng://gnx-auth/lib/interceptors/gnx-refresh-token-interceptor.ts","ng://gnx-auth/lib/gnx-auth.module.ts"],"sourcesContent":["import {Inject, Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable, of, ReplaySubject, Subject} from 'rxjs';\nimport {catchError, map, switchMap, tap} from 'rxjs/operators';\nimport {Token, TokenData, Translateable} from './gnx-models';\nimport {CookieService} from \"ngx-cookie-service\";\nimport {JwtHelperService} from '@auth0/angular-jwt';\nimport {ActivatedRoute, Router} from \"@angular/router\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GnxAuthService {\n  readonly AUTH_SERVER_TOKEN_ENDPOINT = '/oauth/token';\n  readonly AUTH_SERVER_LOGIN_ENDPOINT = '/oauth/authorize';\n  readonly AUTH_SERVER_SIGN_UP_ENDPOINT = '/registration';\n  readonly AUTH_SERVER_LANGUAGE_ENDPOINT = '/api/accounts/current/locale';\n  readonly ACCESS_TOKEN_COOKIE_NAME = 'access_token';\n  readonly REFRESH_TOKEN_COOKIE_NAME = 'refresh_token';\n  readonly COOKIE_PATH = '/';\n\n  private initialized = false;\n\n  clientId: string;\n  authServerUrl: string;\n  cookieDomainName: string;\n\n  private jwtHelper = new JwtHelperService();\n\n  private accessToken$: Subject<Token> = new ReplaySubject<Token>(1);\n  private accessToken: Token;\n  private refreshToken: Token;\n\n  private translatorService: Translateable;\n\n  private userLanguage: string;\n\n  constructor(private http: HttpClient,\n              private cookieService: CookieService,\n              private router: Router,\n              private route: ActivatedRoute,\n              @Inject('env') private env) {\n\n    this.clientId = env.clientId;\n    this.authServerUrl = env.authServerUrl;\n    this.cookieDomainName = env.cookieDomainName;\n  }\n\n  setTranslatorService(translatorService: Translateable) {\n    this.translatorService = translatorService;\n  }\n\n  init() {\n    // intercept request with 'code' param to get token by the code\n    let matchings = window.location.search.match(/code=(.+?)(&.+)?$/);\n    let code = matchings ? matchings[1] : null;\n    if (code) {\n      this.getTokensByCode(code);\n    } else {\n      this.tryToGetTokensFromCookieOrStorage().subscribe();\n    }\n    this.initialized = true;\n  }\n\n  getToken(): Observable<Token> {\n    if (!this.initialized) {\n      this.init();\n    }\n    return this.accessToken$.asObservable();\n  }\n\n  getTokensByCode(code: string) {\n    const params = new URLSearchParams();\n    params.append('grant_type', 'authorization_code');\n    params.append('client_id', this.clientId);\n    params.append('redirect_uri', this.getRedirectUri());\n    params.append('code', code);\n\n    const headers = new HttpHeaders({\n      'Content-type': 'application/x-www-form-urlencoded; charset=utf-8',\n      'Authorization': 'Basic ' + btoa(this.clientId + ':secret')\n    });\n\n    this.http.post<TokenData>(this.authServerUrl + this.AUTH_SERVER_TOKEN_ENDPOINT, params.toString(),\n      {headers: headers}).subscribe(tokenData => {\n        this.saveTokens(tokenData);\n        this.accessToken$.next(this.accessToken);\n        this.removeCodeParamAndNavigateToTheSamePage().then();\n      },\n      err => this.accessToken$.next(null));\n  }\n\n  getAccessTokenByRefreshToken(): Observable<Token> {\n    return this.tryToGetTokensFromCookieOrStorage().pipe(\n      switchMap(val => this.getToken())\n    );\n  }\n\n  redirectToLoginPage() {\n    window.location.href = `${this.authServerUrl}${this.AUTH_SERVER_LOGIN_ENDPOINT}` +\n      `?response_type=code&client_id=${this.clientId}&redirect_uri=${this.getRedirectUri()}`;\n  }\n\n  redirectToSignUpPage() {\n    window.location.href = `${this.authServerUrl}${this.AUTH_SERVER_SIGN_UP_ENDPOINT}`;\n  }\n\n  logout() {\n    this.deleteTokens();\n    this.accessToken$.next(null);\n    this.navigateToTheSamePage().then();\n  }\n\n  retrieveUserLanguageFromServer() {\n    this.http.get<{ locale: string }>(this.authServerUrl + this.AUTH_SERVER_LANGUAGE_ENDPOINT)\n      .subscribe(res => {\n        if (res && res.locale !== this.translatorService.getCurrentLang().toLowerCase()) {\n          this.userLanguage = res.locale;\n          this.translatorService.useLanguage(this.userLanguage);\n        }\n      });\n  }\n\n  setDefaultUserLanguage() {\n    this.userLanguage = this.translatorService.getCurrentLang();\n  }\n\n  private tryToGetTokensFromCookieOrStorage(): Observable<boolean> {\n    if (this.isValidToken(this.accessToken)) {\n      this.accessToken$.next(this.accessToken);\n      return of(true);\n    }\n\n    // look for access_token in cookie\n    let encodedToken = this.cookieService.get(this.ACCESS_TOKEN_COOKIE_NAME);\n    let decodedToken = this.decodeToken(encodedToken);\n    if (this.isValidToken(decodedToken)) {\n      this.accessToken = decodedToken;\n      this.accessToken$.next(decodedToken);\n      return of(true);\n    } else {\n      this.removeAccessTokenFromCookie();\n    }\n\n    // look for a refresh token in cookie\n    let refreshToken: Token;\n    if (this.refreshToken) {\n      refreshToken = this.refreshToken;\n    } else {\n      refreshToken = this.decodeToken(this.cookieService.get(this.REFRESH_TOKEN_COOKIE_NAME));\n    }\n    if (this.isValidToken(refreshToken)) {\n      return this.getNewTokensByRefreshToken(refreshToken).pipe(\n        tap(tokenData => {\n          this.saveTokens(tokenData);\n          this.accessToken$.next(this.accessToken);\n        }),\n        map(tokenData => !!tokenData),\n        catchError(err => {\n          this.removeRefreshTokenFromCookie();\n          this.accessToken$.next(null);\n          return of(false);\n        })\n      );\n    } else {\n      this.removeRefreshTokenFromCookie();\n    }\n\n    this.accessToken$.next(null);\n    return of(false);\n  }\n\n  private removeCodeParamAndNavigateToTheSamePage(): Promise<boolean> {\n    let queryParams: any = {};\n    let params = this.route.snapshot.queryParamMap;\n    params.keys.forEach(k => {\n      if (k !== 'code') {\n        queryParams[k] = params.get(k);\n      }\n    });\n\n    let currentUrlPath = this.getCurrentUrlPath();\n    return this.router.navigate(\n      [currentUrlPath],\n      {\n        relativeTo: this.route,\n        queryParams: queryParams,\n      });\n  }\n\n  private navigateToTheSamePage(): Promise<boolean> {\n    let queryParams: any = {};\n    let params = this.route.snapshot.queryParamMap;\n    params.keys.forEach(k => {\n        queryParams[k] = params.get(k);\n    });\n\n    let currentUrlPath = this.getCurrentUrlPath();\n    return this.router.navigate(\n      [currentUrlPath],\n      {\n        relativeTo: this.route,\n        queryParams: queryParams,\n      });\n  }\n\n  private saveTokens(tokenData: TokenData) {\n    if (tokenData) {\n      let decodedAccessToken = this.decodeToken(tokenData.access_token);\n      let acExpireDate = new Date(decodedAccessToken.exp * 1000);\n      this.cookieService.set(this.ACCESS_TOKEN_COOKIE_NAME, tokenData.access_token, acExpireDate, this.COOKIE_PATH, this.cookieDomainName);\n      this.accessToken = decodedAccessToken;\n\n      let decodedRefreshToken = this.decodeToken(tokenData.refresh_token);\n      let rtExpireDate = new Date(decodedRefreshToken.exp * 1000);\n      this.cookieService.set(this.REFRESH_TOKEN_COOKIE_NAME, tokenData.refresh_token, rtExpireDate, this.COOKIE_PATH, this.cookieDomainName);\n      this.refreshToken = this.decodeToken(tokenData.refresh_token);\n    }\n  }\n\n  private getCurrentUrlPath() {\n    let url = this.router.url;\n    if (url.indexOf('?') > 0) {\n      url = url.substr(0, url.indexOf('?'))\n    }\n    return url;\n  }\n\n  private getNewTokensByRefreshToken(refreshToken: Token): Observable<TokenData> {\n    const headers = new HttpHeaders({\n      'Content-type': 'application/x-www-form-urlencoded; charset=utf-8',\n      'Authorization': 'Basic ' + btoa(this.clientId + ':secret')\n    });\n\n    let body = new URLSearchParams();\n    body.set('grant_type', 'refresh_token');\n    body.set('refresh_token', refreshToken.encodedToken);\n\n    return this.http.post<TokenData>(this.authServerUrl + this.AUTH_SERVER_TOKEN_ENDPOINT, body.toString(), {headers: headers});\n  }\n\n  private isValidToken(token: Token): boolean {\n    if (!token) {\n      return false;\n    }\n    let expirationSeconds = token.exp;\n    return expirationSeconds && (new Date().getTime() < expirationSeconds * 1000);\n  }\n\n  private deleteTokens() {\n    this.removeAccessTokenFromCookie();\n    this.accessToken = null;\n    this.removeRefreshTokenFromCookie();\n    this.refreshToken = null;\n  }\n\n  private removeAccessTokenFromCookie() {\n    let cookieValue = this.cookieService.get(this.ACCESS_TOKEN_COOKIE_NAME);\n    if (cookieValue) {\n      let expireDate = new Date(0);\n      this.cookieService.set(this.ACCESS_TOKEN_COOKIE_NAME, cookieValue, expireDate, this.COOKIE_PATH, this.cookieDomainName);\n    }\n  }\n\n  private removeRefreshTokenFromCookie() {\n    let cookieValue = this.cookieService.get(this.REFRESH_TOKEN_COOKIE_NAME);\n    if (cookieValue) {\n      let expireDate = new Date(0);\n      this.cookieService.set(this.REFRESH_TOKEN_COOKIE_NAME, cookieValue, expireDate, this.COOKIE_PATH, this.cookieDomainName);\n    }\n  }\n\n  private decodeToken(encodedToken: string): Token {\n    if (!encodedToken) {\n      return null;\n    }\n\n    let decodedToken = this.jwtHelper.decodeToken(encodedToken) as Token;\n    if (decodedToken) {\n      decodedToken.encodedToken = encodedToken;\n    }\n\n    return decodedToken;\n  }\n\n  private getRedirectUri(): string {\n    return window.location.href.replace(/^(http[s]?:\\/\\/[a-zA-Z\\\\.:0-9]+)(\\/.*)$/, '$1');\n  }\n\n}\n","import {Injectable} from \"@angular/core\";\nimport {CanActivate, Router} from \"@angular/router\";\nimport {GnxAuthService} from \"../gnx-auth.service\";\nimport {Observable, of} from \"rxjs\";\nimport {map, switchMap} from \"rxjs/operators\";\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AllowNonLoggedUserGuard implements CanActivate {\n  constructor(public auth: GnxAuthService, public router: Router) {}\n  canActivate(): Observable<boolean> {\n    return of(null).pipe(\n      switchMap(() => this.auth.getToken()),\n      map(token => {\n        return true;\n      }) // always returns true, needed to try to get token from cookie\n    );\n  }\n}\n","import {Injectable} from \"@angular/core\";\nimport {CanActivate, Router} from \"@angular/router\";\nimport {GnxAuthService} from \"../gnx-auth.service\";\nimport {Observable} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RequireLoggedUserGuard implements CanActivate {\n  constructor(public auth: GnxAuthService, public router: Router) {}\n  canActivate(): Observable<boolean> {\n    return this.auth.getToken().pipe(\n      map(token => {\n        if (!token) {\n          this.auth.redirectToLoginPage();\n          return false;\n        }\n        return true;\n      }),\n    );\n  }\n}\n","import {Component, Inject, Input, OnInit} from '@angular/core';\nimport {GnxAuthService} from \"../gnx-auth.service\";\nimport {Translateable} from \"../gnx-models\";\n\n@Component({\n  selector: 'gnx-auth',\n  templateUrl: './gnx-auth.component.html',\n  styleUrls: ['./gnx-auth.component.scss']\n})\nexport class GnxAuthComponent implements OnInit {\n\n  @Input() redirectToLoginPageIfUserNotLoggedIn = true;\n\n  isLoggedIn: boolean;\n  userName: string;\n  initialized = false;\n\n  constructor(private service: GnxAuthService,\n              @Inject('TranslatorService') public translatorService: Translateable,\n              @Inject('env') public env) {\n    service.setTranslatorService(translatorService);\n  }\n\n  ngOnInit() {\n    this.service.getToken().subscribe(token => {\n      if (token) {\n        this.userName = token.user_name;\n        this.isLoggedIn = true;\n        this.service.retrieveUserLanguageFromServer();\n      } else {\n        this.userName = null;\n        this.isLoggedIn = false;\n        this.service.setDefaultUserLanguage();\n      }\n      this.initialized = true;\n    });\n  }\n\n  login() {\n    this.service.redirectToLoginPage();\n  }\n\n  signUp() {\n    this.service.redirectToSignUpPage();\n  }\n\n  logout() {\n    this.service.logout();\n    this.isLoggedIn = false;\n  }\n\n  translate(text: string): string {\n    return this.translatorService.translate.instant(text);\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\n\nimport {Observable} from 'rxjs';\nimport {GnxAuthService} from \"../gnx-auth.service\";\nimport {first, map, switchMap} from \"rxjs/operators\";\n\n@Injectable()\nexport class GnxApplyTokenInterceptor implements HttpInterceptor {\n\n  constructor(private gnxAuthService: GnxAuthService) {\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (req.url.indexOf('/api/') > -1) {\n      return this.gnxAuthService.getToken().pipe(\n        first(),\n        map(token => {\n            if (token) {\n              return req.clone({\n                setHeaders: {\n                  Authorization: 'Bearer ' + token.encodedToken\n                }\n              })\n            }\n            return req;\n          }\n        ),\n        switchMap(request => next.handle(request)),\n      );\n    }\n    return next.handle(req);\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\n\nimport {Observable, throwError} from 'rxjs';\nimport {catchError, first, switchMap} from \"rxjs/operators\";\nimport {GnxAuthService} from \"../gnx-auth.service\";\n\n@Injectable()\nexport class GnxRefreshTokenInterceptor implements HttpInterceptor {\n\n  private notTriedYet = true;\n\n    constructor(private gnxAuthService: GnxAuthService) {\n    }\n\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n      if (req.url.startsWith('/api/')) {\n        return next.handle(req).pipe(\n          catchError(err => {\n            if (err instanceof HttpErrorResponse && err.status === 401) { // it seems access token hs expired, try to get new tokens by refresh token\n              if (this.notTriedYet) {\n                this.notTriedYet = false;\n                return this.gnxAuthService.getAccessTokenByRefreshToken().pipe(\n                  first(),\n                  switchMap(token => {\n                    this.notTriedYet = true;\n                    if (token) {\n                      let newRequest = req.clone({\n                        setHeaders: {\n                          Authorization: 'Bearer ' + token.encodedToken\n                        }\n                      });\n                      return next.handle(newRequest);\n                    }\n                    this.gnxAuthService.redirectToLoginPage();\n                  })\n                );\n              } else {\n                this.notTriedYet = true;\n                this.gnxAuthService.redirectToLoginPage();\n              }\n            } else {\n              return throwError(err);\n            }\n          })\n        );\n      }\n\n      return next.handle(req);\n    }\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\n// LibComponent\nimport {GnxAuthComponent} from './components/gnx-auth.component';\nimport {CookieService} from \"ngx-cookie-service\";\nimport {HTTP_INTERCEPTORS} from \"@angular/common/http\";\nimport {GnxApplyTokenInterceptor} from \"./interceptors/gnx-apply-token-interceptor\";\nimport {GnxRefreshTokenInterceptor} from \"./interceptors/gnx-refresh-token-interceptor\";\nimport {GnxAuthService} from \"./gnx-auth.service\";\n\n\n@NgModule({\n  declarations: [\n    GnxAuthComponent\n  ],\n  imports: [\n    BrowserModule,\n  ],\n  exports: [\n    GnxAuthComponent\n  ],\n  providers: [\n    CookieService,\n    {provide: HTTP_INTERCEPTORS, useClass: GnxApplyTokenInterceptor, multi: true},\n    {provide: HTTP_INTERCEPTORS, useClass: GnxRefreshTokenInterceptor, multi: true},\n  ]\n})\nexport class GnxAuthModule {\n\n  public static forRoot(environment: any, translatorService: any): ModuleWithProviders {\n\n    return {\n      ngModule: GnxAuthModule,\n      providers: [\n        GnxAuthService,\n        {provide: 'TranslatorService', useClass: translatorService},\n        {\n          provide: 'env',\n          useValue: environment\n        }\n      ]\n    };\n  }\n}\n"],"names":[],"mappings":"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"}
